// Mocks generated by Mockito 5.4.4 from annotations
// in restaurant_booking_app/test/presentation/providers/sms_auth_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:restaurant_booking_app/core/network/api_result.dart' as _i4;
import 'package:restaurant_booking_app/domain/entities/auth.dart' as _i6;
import 'package:restaurant_booking_app/domain/usecases/auth/login_with_phone_usecase.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [LoginWithPhoneUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginWithPhoneUseCase extends _i1.Mock
    implements _i2.LoginWithPhoneUseCase {
  MockLoginWithPhoneUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.ApiResult<void>> sendSmsCode(String? phone) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendSmsCode,
          [phone],
        ),
        returnValue: _i3.Future<_i4.ApiResult<void>>.value(
            _i5.dummyValue<_i4.ApiResult<void>>(
          this,
          Invocation.method(
            #sendSmsCode,
            [phone],
          ),
        )),
      ) as _i3.Future<_i4.ApiResult<void>>);

  @override
  _i3.Future<_i4.ApiResult<_i6.AuthResult>> verifyOtp(
    String? phone,
    String? code,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #verifyOtp,
          [
            phone,
            code,
          ],
        ),
        returnValue: _i3.Future<_i4.ApiResult<_i6.AuthResult>>.value(
            _i5.dummyValue<_i4.ApiResult<_i6.AuthResult>>(
          this,
          Invocation.method(
            #verifyOtp,
            [
              phone,
              code,
            ],
          ),
        )),
      ) as _i3.Future<_i4.ApiResult<_i6.AuthResult>>);
}
