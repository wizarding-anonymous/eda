// Mocks generated by Mockito 5.4.4 from annotations
// in restaurant_booking_app/test/presentation/providers/forgot_password_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_riverpod/flutter_riverpod.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:restaurant_booking_app/core/network/api_result.dart' as _i7;
import 'package:restaurant_booking_app/domain/usecases/auth/request_password_reset_usecase.dart'
    as _i6;
import 'package:restaurant_booking_app/domain/usecases/auth/reset_password_usecase.dart'
    as _i9;
import 'package:restaurant_booking_app/presentation/providers/forgot_password_provider.dart'
    as _i2;
import 'package:state_notifier/state_notifier.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeForgotPasswordState_0 extends _i1.SmartFake
    implements _i2.ForgotPasswordState {
  _FakeForgotPasswordState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ForgotPasswordNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockForgotPasswordNotifier extends _i1.Mock
    implements _i2.ForgotPasswordNotifier {
  MockForgotPasswordNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onError(_i3.ErrorListener? _onError) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          _onError,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);

  @override
  _i4.Stream<_i2.ForgotPasswordState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<_i2.ForgotPasswordState>.empty(),
      ) as _i4.Stream<_i2.ForgotPasswordState>);

  @override
  _i2.ForgotPasswordState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeForgotPasswordState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.ForgotPasswordState);

  @override
  set state(_i2.ForgotPasswordState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.ForgotPasswordState get debugState => (super.noSuchMethod(
        Invocation.getter(#debugState),
        returnValue: _FakeForgotPasswordState_0(
          this,
          Invocation.getter(#debugState),
        ),
      ) as _i2.ForgotPasswordState);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> requestPasswordReset(String? email) => (super.noSuchMethod(
        Invocation.method(
          #requestPasswordReset,
          [email],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> resetPassword(
    String? token,
    String? newPassword,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #resetPassword,
          [
            token,
            newPassword,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  void clearError() => super.noSuchMethod(
        Invocation.method(
          #clearError,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearState() => super.noSuchMethod(
        Invocation.method(
          #clearState,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool updateShouldNotify(
    _i2.ForgotPasswordState? old,
    _i2.ForgotPasswordState? current,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            old,
            current,
          ],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i3.RemoveListener addListener(
    _i5.Listener<_i2.ForgotPasswordState>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: () {},
      ) as _i3.RemoveListener);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [RequestPasswordResetUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRequestPasswordResetUseCase extends _i1.Mock
    implements _i6.RequestPasswordResetUseCase {
  MockRequestPasswordResetUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i7.ApiResult<void>> execute(String? email) => (super.noSuchMethod(
        Invocation.method(
          #execute,
          [email],
        ),
        returnValue: _i4.Future<_i7.ApiResult<void>>.value(
            _i8.dummyValue<_i7.ApiResult<void>>(
          this,
          Invocation.method(
            #execute,
            [email],
          ),
        )),
      ) as _i4.Future<_i7.ApiResult<void>>);
}

/// A class which mocks [ResetPasswordUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockResetPasswordUseCase extends _i1.Mock
    implements _i9.ResetPasswordUseCase {
  MockResetPasswordUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i7.ApiResult<void>> execute(
    String? token,
    String? newPassword,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [
            token,
            newPassword,
          ],
        ),
        returnValue: _i4.Future<_i7.ApiResult<void>>.value(
            _i8.dummyValue<_i7.ApiResult<void>>(
          this,
          Invocation.method(
            #execute,
            [
              token,
              newPassword,
            ],
          ),
        )),
      ) as _i4.Future<_i7.ApiResult<void>>);
}
