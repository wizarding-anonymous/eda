// Mocks generated by Mockito 5.4.4 from annotations
// in restaurant_booking_app/test/domain/services/location_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:restaurant_booking_app/domain/entities/venue.dart' as _i4;
import 'package:restaurant_booking_app/domain/services/location_service.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [LocationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationService extends _i1.Mock implements _i2.LocationService {
  MockLocationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.LatLng?> getCurrentLocation() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentLocation,
          [],
        ),
        returnValue: _i3.Future<_i4.LatLng?>.value(),
      ) as _i3.Future<_i4.LatLng?>);

  @override
  _i3.Future<bool> requestLocationPermission() => (super.noSuchMethod(
        Invocation.method(
          #requestLocationPermission,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> isLocationServiceEnabled() => (super.noSuchMethod(
        Invocation.method(
          #isLocationServiceEnabled,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  double calculateDistance(
    _i4.LatLng? from,
    _i4.LatLng? to,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculateDistance,
          [
            from,
            to,
          ],
        ),
        returnValue: 0.0,
      ) as double);

  @override
  _i3.Future<void> openNavigation(
    _i4.LatLng? destination, {
    String? destinationName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #openNavigation,
          [destination],
          {#destinationName: destinationName},
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
